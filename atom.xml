<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tong</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tongfangyuan.github.io/"/>
  <updated>2018-04-19T03:47:11.000Z</updated>
  <id>https://tongfangyuan.github.io/</id>
  
  <author>
    <name>Tong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS 实现语音边录边传</title>
    <link href="https://tongfangyuan.github.io/2018/03/15/iOS%20%E5%AE%9E%E7%8E%B0%E8%AF%AD%E9%9F%B3%E8%BE%B9%E5%BD%95%E8%BE%B9%E4%BC%A0/"/>
    <id>https://tongfangyuan.github.io/2018/03/15/iOS 实现语音边录边传/</id>
    <published>2018-03-15T06:35:23.000Z</published>
    <updated>2018-04-19T03:47:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本原理就是在用户开始录音的时候就与服务器建立连接,将音频数据分块传输,直到停止录音.<br>相比录音结束后上传整个音频数据,边录边传更省时间,从而提高用户体验.</p><a id="more"></a><h1 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h1><ol><li>开始录音,与服务器建立流上传连接</li><li>录音期间,将分块数据传输到服务器</li><li>录音结束并且所有数据传输完毕,关闭流连接</li><li>处理服务器返回的数据</li></ol><h2 id="与服务器建立连接"><a href="#与服务器建立连接" class="headerlink" title="与服务器建立连接"></a>与服务器建立连接</h2><p>用户开始录音时,建立流上传连接任务.在session调用<code>uploadTaskWithStreamedRequest:</code>后,系统会调用<code>URLSession:task:needNewBodyStream:</code> 代理方法获取输入流(<code>HTTPBodyStream</code>),通过输入流就可以向服务器上传分块数据</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURLSessionConfiguration</span> *config = [<span class="built_in">NSURLSessionConfiguration</span> defaultSessionConfiguration];</span><br><span class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:config];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化 request</span></span><br><span class="line"><span class="built_in">NSURL</span> *r_url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.example.com"</span>];</span><br><span class="line"><span class="built_in">NSMutableURLRequest</span> *request = [<span class="built_in">NSMutableURLRequest</span> requestWithURL:r_url];</span><br><span class="line">request.HTTPMethod = <span class="string">@"POST"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建上传任务</span></span><br><span class="line"><span class="built_in">NSURLSessionUploadTask</span> *uploadTask = [session uploadTaskWithStreamedRequest:request];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 任务执行</span></span><br><span class="line">[uploadTask resume];</span><br></pre></td></tr></table></figure><p>实现代理方法,传入输入流给<code>session</code><br>建立输入流的方式有两种:</p><ul><li>调用<code>NSStream</code>类方法<code>getBoundStreamsWithBufferSize:inputStream:outputStream:</code>得到两个绑定的流对象输入流(<code>inputStream</code>)和输出流(<code>outputStream</code>),当输出流写入数据的时候系统内部会将数据传递给输入流.</li><li>子类化<code>NSInputStream</code>(文后链接有介绍这种方法,原文作者推荐第一种方法,本文不重点讲解)</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task needNewBodyStream:(<span class="keyword">void</span> (^)(<span class="built_in">NSInputStream</span> * _Nullable))completionHandler</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSInputStream</span> *inputStream = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSOutputStream</span> *outputStream = <span class="literal">nil</span>;</span><br><span class="line">    [<span class="built_in">NSStream</span> getBoundStreamsWithBufferSize:<span class="number">1024</span> inputStream:&amp;inputStream outputStream:&amp;outputStream];</span><br><span class="line">    <span class="keyword">self</span>.bodyStream = inputStream;</span><br><span class="line">    <span class="keyword">self</span>.outputStream = outputStream;</span><br><span class="line">    <span class="keyword">self</span>.outputStream.delegate = <span class="keyword">self</span>;</span><br><span class="line">    [<span class="keyword">self</span>.outputStream scheduleInRunLoop:[<span class="built_in">NSRunLoop</span> currentRunLoop] forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">    [<span class="keyword">self</span>.outputStream open];</span><br><span class="line">    completionHandler(<span class="keyword">self</span>.bodyStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据分块上传到服务器"><a href="#数据分块上传到服务器" class="headerlink" title="数据分块上传到服务器"></a>数据分块上传到服务器</h2><p>传输分块数据,写入分块数据是在<code>stream:handleEvent:</code>方法处理的,上文有设置输出流代理并且开启,每当有数据可以写入的时候,就会代用代理方法.</p><ul><li><code>NSStreamEventHasSpaceAvailable</code>事件表示有新数据可以写入,输入流写入数据方法<code>write:maxLength:</code></li><li>当用户停止录音并且所有数据写入完成之后,我们需要关闭输出流和将其代理置空.如果不关闭流,可能会出现连接超时,数据传输失败.</li><li>所有数据是否写入完成需要结合具体场景来判断</li><li>关于输入流输出流如何使用,请参考苹果给的demo</li><li>下面是伪代码</li></ul><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)stream:(<span class="built_in">NSStream</span> *)aStream handleEvent:(<span class="built_in">NSStreamEvent</span>)eventCode</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span> (eventCode) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSStreamEventNone</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NSStreamEventNone"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSStreamEventOpenCompleted</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NSStreamEventOpenCompleted"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSStreamEventHasBytesAvailable</span>: &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NSStreamEventHasBytesAvailable"</span>);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSStreamEventHasSpaceAvailable</span>: &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"NSStreamEventHasBytesAvailable"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 录音中且有新数据需要写入,输入流写入数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 录音中没有新数据,等待新数据进入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 录音停止,数据未写完</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 录音停止,所有数据未写完,关闭输入流,设置输入流代理为nil</span></span><br><span class="line"></span><br><span class="line">        ....</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSStreamEventErrorOccurred</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NSStreamEventErrorOccurred"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSStreamEventEndEncountered</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"NSStreamEventEndEncountered"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理服务器响应数据"><a href="#处理服务器响应数据" class="headerlink" title="处理服务器响应数据"></a>处理服务器响应数据</h2><p>要获取服务器返回的数据需要结合下面的代理方法:</p><ol><li><code>URLSession:dataTask:didReceiveResponse:completionHandler:</code></li><li><code>URLSession:dataTask:didReceiveData:</code> 如果服务器返回的数据量大，比如包含二进制音频视频等，会分段接收</li><li><code>URLSession:task:didCompleteWithError:</code>所有数据接收完成后会调用改方法</li></ol><p>实现第一个代理方法的<code>completionHandler</code>,才会调用第二个代理拿到服务器数据<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</span><br><span class="line">          dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response</span><br><span class="line"> completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionResponseDisposition</span> disposition))completionHandler</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (urlResponse.statusCode &gt;= <span class="number">200</span> || urlResponse.statusCode &lt;= <span class="number">299</span>) &#123;</span><br><span class="line">        <span class="built_in">NSHTTPURLResponse</span> *urlResponse = (<span class="built_in">NSHTTPURLResponse</span> *)response;</span><br><span class="line">   completionHandler(<span class="built_in">NSURLSessionResponseAllow</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接收服务器响应数据</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask</span><br><span class="line">    didReceiveData:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSHTTPURLResponse</span> *res = (<span class="built_in">NSHTTPURLResponse</span> *)dataTask.response;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Send audio status code：%d"</span>, (<span class="keyword">int</span>)res.statusCode);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.streamUploadTask == dataTask) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 拼接数据</span></span><br><span class="line">        [<span class="keyword">self</span>.streamReceiveData appendData:data];</span><br><span class="line"></span><br><span class="line">    &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他任务响应数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据处理<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session</span><br><span class="line">              task:(<span class="built_in">NSURLSessionTask</span> *)task</span><br><span class="line">didCompleteWithError:(<span class="keyword">nullable</span> <span class="built_in">NSError</span> *)error</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.streamUploadTask==task) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!error) &#123;</span><br><span class="line">            <span class="comment">// 数据处理</span></span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://forums.developer.apple.com/thread/76675" target="_blank" rel="noopener">How to stream upload recorder audio as multipart message to a http/2 endpoint</a><br><a href="https://developer.apple.com/library/content/samplecode/SimpleURLConnections/Introduction/Intro.html" target="_blank" rel="noopener">NSStream Demo</a><br><a href="https://tongfangyuan.github.io/2018/03/15/iOS%20实现语音边录边传">原文链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本原理就是在用户开始录音的时候就与服务器建立连接,将音频数据分块传输,直到停止录音.&lt;br&gt;相比录音结束后上传整个音频数据,边录边传更省时间,从而提高用户体验.&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://tongfangyuan.github.io/categories/iOS/"/>
    
    
      <category term="边录边传 NSStream" scheme="https://tongfangyuan.github.io/tags/%E8%BE%B9%E5%BD%95%E8%BE%B9%E4%BC%A0-NSStream/"/>
    
  </entry>
  
</feed>
